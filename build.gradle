plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.2'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.graalvm.buildtools.native' version '0.10.3'
  id 'org.cyclonedx.bom' version '1.10.0'
  id 'io.spring.javaformat' version '0.0.43'
  id "io.spring.nohttp" version "0.0.11"
  id 'pl.allegro.tech.build.axion-release' version '1.13.14'
  id 'maven-publish'
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.javaformat'

gradle.startParameter.excludedTaskNames += [ "checkFormatAot", "checkFormatAotTest" ]

group = 'org.springframework.samples'
//This iis a way to mark the version in it's development stage
//version = '0.1.0-SNAPSHOT'


//Using tags are a more effiicient way of versioning our code and we can link a specififc commit 
//with a version number - see plugin axion release 
version = scmVersion.version

java {
  sourceCompatibility = JavaVersion.VERSION_17
}


// Configure the publishing task
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // artifact attributes
            artifactId = 'springer-ringer-dinner'
            version = '3.4.0'
            artifactId = 'springer-ringer-dinner'
            version = '0.1.0-SNAPSHOT'
        }
    }
    
    repositories {
        maven {
            name = 'nexus'
            url = 'http://34.226.72.65:8081/repository/maven-snapshots/'
            allowInsecureProtocol = true

            credentials {
                username = project.findProperty('nexusUsername')
                password = project.findProperty('nexusPassword')
            }
        }
    }
}

ext.checkstyleVersion = "10.20.1"
ext.springJavaformatCheckstyleVersion = "0.0.43"
ext.webjarsLocatorLiteVersion = "1.0.1"
ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.3.3"

dependencies {
  // Workaround for AOT issue (https://github.com/spring-projects/spring-framework/pull/33949) -->
  implementation 'io.projectreactor:reactor-core'

  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars:webjars-locator-lite:${webjarsLocatorLiteVersion}"
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.boot:spring-boot-docker-compose'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.testcontainers:mysql'
  checkstyle "io.spring.javaformat:spring-javaformat-checkstyle:${springJavaformatCheckstyleVersion}"
  checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
}

tasks.named('test') {
  useJUnitPlatform()
}

checkstyle {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

checkstyleNohttp {
  configDirectory = project.file('src/checkstyle')
  configFile = file('src/checkstyle/nohttp-checkstyle.xml')
}

tasks.named("formatMain").configure { dependsOn("checkstyleMain") }
tasks.named("formatMain").configure { dependsOn("checkstyleNohttp") }

tasks.named("formatTest").configure { dependsOn("checkstyleTest") }
tasks.named("formatTest").configure { dependsOn("checkstyleNohttp") }

checkstyleAot.enabled = false
checkstyleAotTest.enabled = false

checkFormatAot.enabled = false
checkFormatAotTest.enabled = false

formatAot.enabled = false
formatAotTest.enabled = false

// Configure SSH for git operations
// tasks.withType(org.ajoberstar.grgit.operation.OpenOperation) {
//     credentials {
//         identity = file('~/.ssh/id_rsa')
//     }
// }


tasks.register('openTestResults') {
    dependsOn 'build'
    //This shows the current task depends on the build task

    doFirst {
        println 'This is executed first'
    }

    doLast {
        def reportFile = file("$buildDir/reports/tests/test/index.html")

        if (reportFile.exists()) {
            println "Opening test report: $reportFile"
            def osName = System.properties['os.name'].toLowerCase()

            if (osName.contains('mac')) {
                exec {
                    commandLine 'open', reportFile.getAbsolutePath()
                }
            } else if (osName.contains('windows')) {
                exec {
                    commandLine 'cmd', '/c', 'start', reportFile.getAbsolutePath()
                }
            } else {
                exec {
                    commandLine 'xdg-open', reportFile.getAbsolutePath()
                }
            }
        } else {
            println "Test report not found: $reportFile"
        }
    }
}

// Task to upload to Nexus
task uploadToNexus {
    description = 'Uploads the project artifacts to Nexus repository'
    group = 'upload'
    
    dependsOn 'publish'
}

